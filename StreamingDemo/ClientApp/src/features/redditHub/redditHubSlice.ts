import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../store';
import { RedditApiPostData } from './redditHubTypes';

export interface RedditHubState {
    data: RedditApiPostData[];
    stats: {};
    status: 'idle' | 'loading' | 'failed' | 'invalid' | 'disconnected';
}

const initialState: RedditHubState = {
    data: [],
    stats: {},
    status: 'disconnected',
};

let connection: HubConnection | null = null;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const connectRedditHub = createAsyncThunk<void, string>(
    'redditHub/connectAction',
    async (url, { dispatch }) => {
        connection = new HubConnectionBuilder()
            .withUrl(url)
            .withAutomaticReconnect()
            .configureLogging(LogLevel.Trace)
            .build();

        connection.on('data', (data) => {
            console.log(data);
            // Dispatch a Redux action with the received data
            dispatch(redditHubSlice.actions.receiveRedditHubData(data));
        });

        connection.on('error', (errorMessage) => {
            console.error(errorMessage);
            //dispatch(setRedditHubError(errorMessage));
        });

        connection.on('config', (configMessage: 'success' | 'error' | 'empty') => {
            console.error(configMessage);
            dispatch(redditHubSlice.actions.receiveRedditHubConfig(configMessage));
        });

        try {
            await connection.start();
            connection.invoke('GetStatus');
            // Dispatch a Redux action to indicate that the connection was successful
            dispatch(redditHubSlice.actions.setRedditHubConnected());
        } catch (reason) {
            console.error(reason);
            // dispatch(setRedditHubError(reason.toString()));
        }
    }
);

export const redditHubSlice = createSlice({
    name: 'redditHub',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes  
        redditHubDisconnect: (state) => {
            state.status = 'disconnected';
            connection?.stop();
            connection = null;
        },
        receiveRedditHubData: (state, action: PayloadAction<RedditApiPostData[]>) => {
            state.data = state.data.concat(action.payload);
            for (const row of action.payload) {

            }
            state.status = 'idle';
        },
        receiveRedditHubConfig: (state, action: PayloadAction<'success' | 'error' | 'empty'>) => {
            switch (action.payload) {
                case 'empty':
                    state.status = 'invalid';
                    break;
                case 'success':
                    state.status = 'idle';
                    break;
                case 'error':
                    state.status = 'failed';
                    break;
                default:
                    break;
            }
        },
        setRedditHubConnected(state) {
            state.status = 'idle';
        },
        setRedditHubError(state, action: PayloadAction<string>) {
            // state.isConnected = false;
            // state.error = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => builder
        .addCase(connectRedditHub.fulfilled, (state) => {
            //state.connection = connection;
        })
        .addCase(connectRedditHub.rejected, (state, action) => {
            // state.connection = null;
            // state.error = action.payload as string;
        })
});

export const { redditHubDisconnect, receiveRedditHubConfig } = redditHubSlice.actions;

export const selectStatus = (state: RootState) => state.redditHub.status;
export const selectData = (state: RootState) => state.redditHub.data;

export default redditHubSlice.reducer;
